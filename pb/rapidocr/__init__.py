# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: rapidocr.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
  TYPE_CHECKING,
  Dict,
  List,
  Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
  import grpclib.server
  from betterproto.grpc.grpclib_client import MetadataLike
  from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Image(betterproto.Message):
  link: Optional[str] = betterproto.string_field(1, optional=True)
  data: Optional[bytes] = betterproto.bytes_field(2, optional=True)
  info: Optional[str] = betterproto.string_field(9, optional=True)
  """message for debug / logging usage"""

  use_det: Optional[bool] = betterproto.message_field(
    3, wraps=betterproto.TYPE_BOOL
  )
  use_cls: Optional[bool] = betterproto.message_field(
    4, wraps=betterproto.TYPE_BOOL
  )
  use_rec: Optional[bool] = betterproto.message_field(
    5, wraps=betterproto.TYPE_BOOL
  )
  box_thresh: Optional[float] = betterproto.message_field(
    6, wraps=betterproto.TYPE_FLOAT
  )
  """0.5"""

  unclip_ratio: Optional[float] = betterproto.message_field(
    7, wraps=betterproto.TYPE_FLOAT
  )
  """1.6"""

  text_score: Optional[float] = betterproto.message_field(
    8, wraps=betterproto.TYPE_FLOAT
  )
  """0.5"""


@dataclass(eq=False, repr=False)
class Point(betterproto.Message):
  x: float = betterproto.float_field(1)
  y: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class Part(betterproto.Message):
  points: List['Point'] = betterproto.message_field(1)
  text: str = betterproto.string_field(2)
  confidence: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class Response(betterproto.Message):
  parts: List['Part'] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TableResponse(betterproto.Message):
  html: str = betterproto.string_field(1)


class RapidOcrServiceStub(betterproto.ServiceStub):
  async def recognize(
    self,
    image: 'Image',
    *,
    timeout: Optional[float] = None,
    deadline: Optional['Deadline'] = None,
    metadata: Optional['MetadataLike'] = None,
  ) -> 'Response':
    return await self._unary_unary(
      '/rapidocr.RapidOCRService/recognize',
      image,
      Response,
      timeout=timeout,
      deadline=deadline,
      metadata=metadata,
    )

  async def recognize_table(
    self,
    image: 'Image',
    *,
    timeout: Optional[float] = None,
    deadline: Optional['Deadline'] = None,
    metadata: Optional['MetadataLike'] = None,
  ) -> 'TableResponse':
    return await self._unary_unary(
      '/rapidocr.RapidOCRService/recognize_table',
      image,
      TableResponse,
      timeout=timeout,
      deadline=deadline,
      metadata=metadata,
    )


class RapidOcrServiceBase(ServiceBase):
  async def recognize(self, image: 'Image') -> 'Response':
    raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

  async def recognize_table(self, image: 'Image') -> 'TableResponse':
    raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

  async def __rpc_recognize(
    self, stream: 'grpclib.server.Stream[Image, Response]'
  ) -> None:
    request = await stream.recv_message()
    response = await self.recognize(request)
    await stream.send_message(response)

  async def __rpc_recognize_table(
    self, stream: 'grpclib.server.Stream[Image, TableResponse]'
  ) -> None:
    request = await stream.recv_message()
    response = await self.recognize_table(request)
    await stream.send_message(response)

  def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
    return {
      '/rapidocr.RapidOCRService/recognize': grpclib.const.Handler(
        self.__rpc_recognize,
        grpclib.const.Cardinality.UNARY_UNARY,
        Image,
        Response,
      ),
      '/rapidocr.RapidOCRService/recognize_table': grpclib.const.Handler(
        self.__rpc_recognize_table,
        grpclib.const.Cardinality.UNARY_UNARY,
        Image,
        TableResponse,
      ),
    }
